#!/bin/bash -ex

IMAGE_STR="# BASE_IMG: This file was created/modified by the Cloud Image build process"
FS_LABEL="base-rootfs"

. config/functions

BOOTPART_START=
BOOTPART_END=
BOOT_MOUNTPOINT=
ROOTPART_START=1

echo "$IMAGE_STR"

case $ARCH:$SUBARCH in
	ppc64el:*|powerpc:*)
		echo "POWER disk images are handled separately"
		exit 0
		;;
	amd64:*|arm64:*)
		echo "We only create EFI images for $ARCH."
		exit 0
		;;
	armhf:raspi2)
		# matches the size of the snappy image
		IMAGE_SIZE=$((4*1000*1000*1000))

		BOOTPART_START=8192s
		BOOTPART_END=138M
		BOOT_MOUNTPOINT=/boot/firmware
		;;
	armhf:imx6)
		# matches the size of the snappy image
		IMAGE_SIZE=$((4*1000*1000*1000))

		BOOTPART_START=2048s
		BOOTPART_END=135M
		BOOT_MOUNTPOINT=/boot
		;;
	*)
		;;
esac

create_empty_partition_table() {
    apt-get install -qqy parted

    parted "$1" --script -- mklabel msdos
}

create_empty_partition() {
    local disk="$1"
    local part="$2"
    local start="$3"
    local end="$4"
    local type="$5"
    local bootable="$6"

    parted_prefix="parted $disk --script --"
    ${parted_prefix} mkpart primary "$type" "$start" "$end"
    if [ -n "$bootable" ]; then
        ${parted_prefix} set "$part" B
    fi
    ${parted_prefix} print
    ${parted_prefix} align-check opt "$part"
}

disk_image=binary/boot/disk.ext4

create_empty_disk_image "${disk_image}"
create_empty_partition_table "${disk_image}"

ROOTPART=1
ROOT_BOOTABLE=1
if [ -n "$BOOTPART_START" ]; then
	ROOTPART=2
	ROOTPART_START="$BOOTPART_END"
	ROOT_BOOTABLE=
	create_empty_partition "$disk_image" 1 "$BOOTPART_START" "$BOOTPART_END" fat32 1
fi
create_empty_partition "${disk_image}" "$ROOTPART" "$ROOTPART_START" -1 ext2 "$ROOT_BOOTABLE"

mount_image "${disk_image}" "$ROOTPART"

# Copy the chroot in to the disk
make_ext4_partition "${rootfs_dev_mapper}"
mkdir mountpoint
mount "${rootfs_dev_mapper}" mountpoint

if [ -n "$BOOT_MOUNTPOINT" ]; then
	boot_dev_mapper="${rootfs_dev_mapper%%[0-9]}1"
	# assume fat32 for now
	mkfs.vfat -n system-boot "$boot_dev_mapper"
	mkdir -p "mountpoint/$BOOT_MOUNTPOINT"
	mount "$boot_dev_mapper" "mountpoint/$BOOT_MOUNTPOINT"
fi

cp -a chroot/* mountpoint/

setup_mountpoint mountpoint

IMX_BOOTPART=binary/boot/firmware
IMX_FW=binary/lib/firmware
IMX_DRIVER=binary/lib/modules

case $ARCH:$SUBARCH in
	armhf:imx6)
		cp -a ${IMX_BOOTPART}/* mountpoint/boot/
		cp -a ${IMX_FW} mountpoint/lib/
		cp -a ${IMX_DRIVER} mountpoint/lib/
		;;
	armhf:raspi2)
		chroot mountpoint flash-kernel \
			--machine "Raspberry Pi 2 Model B"
		# not the best place for this, but neither flash-kernel nor
		# u-boot have provisions for installing u-boot via maintainer
		# script
		config/hooks/raspi2/mkknlimg --dtok \
			mountpoint/usr/lib/u-boot/rpi_2/u-boot.bin \
			mountpoint/boot/firmware/uboot.bin
		;;
	*)	;;
esac

if [ -n "$BOOT_MOUNTPOINT" ]; then
	umount "mountpoint/$BOOT_MOUNTPOINT"
fi

umount_partition mountpoint
rmdir mountpoint

IMX_UBOOT=binary/u-boot_crc.bin
IMX_UBOOT_CRC=binary/u-boot_crc.bin.crc

case $ARCH:$SUBARCH in
	armhf:imx6)
		dd if=${IMX_UBOOT_CRC} of=${disk_image} bs=512 seek=2 conv=notrunc
		dd if=${IMX_UBOOT} of=${disk_image} bs=512 seek=3 conv=notrunc
		;;
	*)	;;
esac

clean_loops
trap - EXIT
